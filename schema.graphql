type Protocol @entity {
  # id should always be "protocol"
  id: ID!

  # total amount of tokens in play
  inPlay: BigInt!

  # initial total value locked
  initialTvl: BigInt!

  # current total value locked
  currentTvl: BigInt!

  # performance as a decimal
  performance: BigDecimal!

  # timestamp for when the protocol stats was last updated
  lastUpdate: BigInt!
}

type Registry @entity {
  # id should always be "registry"
  id: ID!

  # array of vaults
  vaults: [String!]!

  # array of markets
  markets: [String!]!

  # timestamp for when the registry was last updated
  lastUpdate: BigInt!
}

type Bet @entity {
  # index param from placed event, id param from settled event
  id: ID!

  # id for the proposition (horse)
  propositionId: Bytes!

  # id for market for market (race)
  marketId: Bytes!

  # address for market contract
  marketAddress: String!

  # todo: add token address when its added to event

  # amount of token wagered
  amount: BigInt!

  # amount of token as potential payout
  payout: BigInt!

  # address of the bet owner
  owner: String!

  # whether the bet is settled or not
  settled: Boolean!

  # timestamp when bet is placed
  createdAt: BigInt!

  # timestamp when bet is settled
  settledAt: BigInt!

  # tx for createdAt
  createdAtTx: String!

  # tx for settledAt
  settledAtTx: String!
}

type VaultTransaction @entity {
  # tx hash
  id: ID!

  # either deposit or withdraw
  type: String!

  # address of vault
  vaultAddress: String!

  # address of depositer
  depositerAddress: String!

  # amount of token
  amount: BigInt!

  # timestamp of transaction
  timestamp: BigInt!
}
