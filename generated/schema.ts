// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inPlay(): BigInt {
    let value = this.get("inPlay");
    return value!.toBigInt();
  }

  set inPlay(value: BigInt) {
    this.set("inPlay", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get performance(): BigDecimal {
    let value = this.get("performance");
    return value!.toBigDecimal();
  }

  set performance(value: BigDecimal) {
    this.set("performance", Value.fromBigDecimal(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propositionId(): Bytes {
    let value = this.get("propositionId");
    return value!.toBytes();
  }

  set propositionId(value: Bytes) {
    this.set("propositionId", Value.fromBytes(value));
  }

  get marketId(): Bytes {
    let value = this.get("marketId");
    return value!.toBytes();
  }

  set marketId(value: Bytes) {
    this.set("marketId", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value!.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }
}
