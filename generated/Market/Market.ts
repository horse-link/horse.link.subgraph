// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get worker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketOwnershipTransferred extends ethereum.Event {
  get params(): MarketOwnershipTransferred__Params {
    return new MarketOwnershipTransferred__Params(this);
  }
}

export class MarketOwnershipTransferred__Params {
  _event: MarketOwnershipTransferred;

  constructor(event: MarketOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Placed extends ethereum.Event {
  get params(): Placed__Params {
    return new Placed__Params(this);
  }
}

export class Placed__Params {
  _event: Placed;

  constructor(event: Placed) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get propositionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get marketId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Settled extends ethereum.Event {
  get params(): Settled__Params {
    return new Settled__Params(this);
  }
}

export class Settled__Params {
  _event: Settled;

  constructor(event: Settled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get result(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Market__backInputSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class Market__getBetByIndexResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): boolean {
    return this.value3;
  }

  getValue4(): Address {
    return this.value4;
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  back(
    nonce: Bytes,
    propositionId: Bytes,
    marketId: Bytes,
    wager: BigInt,
    odds: BigInt,
    close: BigInt,
    end: BigInt,
    signature: Market__backInputSignatureStruct
  ): BigInt {
    let result = super.call(
      "back",
      "back(bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32)):(uint256)",
      [
        ethereum.Value.fromFixedBytes(nonce),
        ethereum.Value.fromFixedBytes(propositionId),
        ethereum.Value.fromFixedBytes(marketId),
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(odds),
        ethereum.Value.fromUnsignedBigInt(close),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromTuple(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_back(
    nonce: Bytes,
    propositionId: Bytes,
    marketId: Bytes,
    wager: BigInt,
    odds: BigInt,
    close: BigInt,
    end: BigInt,
    signature: Market__backInputSignatureStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "back",
      "back(bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32)):(uint256)",
      [
        ethereum.Value.fromFixedBytes(nonce),
        ethereum.Value.fromFixedBytes(propositionId),
        ethereum.Value.fromFixedBytes(marketId),
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(odds),
        ethereum.Value.fromUnsignedBigInt(close),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromTuple(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetByIndex(index: BigInt): Market__getBetByIndexResult {
    let result = super.call(
      "getBetByIndex",
      "getBetByIndex(uint256):(uint256,uint256,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new Market__getBetByIndexResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toAddress()
    );
  }

  try_getBetByIndex(
    index: BigInt
  ): ethereum.CallResult<Market__getBetByIndexResult> {
    let result = super.tryCall(
      "getBetByIndex",
      "getBetByIndex(uint256):(uint256,uint256,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__getBetByIndexResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toAddress()
      )
    );
  }

  getCount(): BigInt {
    let result = super.call("getCount", "getCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCount", "getCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpiry(id: BigInt): BigInt {
    let result = super.call("getExpiry", "getExpiry(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_getExpiry(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getExpiry", "getExpiry(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFee(): i32 {
    let result = super.call("getFee", "getFee():(uint8)", []);

    return result[0].toI32();
  }

  try_getFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("getFee", "getFee():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getInPlayCount(): BigInt {
    let result = super.call("getInPlayCount", "getInPlayCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInPlayCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInPlayCount",
      "getInPlayCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketTotal(marketId: Bytes): BigInt {
    let result = super.call(
      "getMarketTotal",
      "getMarketTotal(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getMarketTotal(marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMarketTotal",
      "getMarketTotal(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOdds(wager: BigInt, odds: BigInt, propositionId: Bytes): BigInt {
    let result = super.call(
      "getOdds",
      "getOdds(int256,int256,bytes32):(int256)",
      [
        ethereum.Value.fromSignedBigInt(wager),
        ethereum.Value.fromSignedBigInt(odds),
        ethereum.Value.fromFixedBytes(propositionId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOdds(
    wager: BigInt,
    odds: BigInt,
    propositionId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOdds",
      "getOdds(int256,int256,bytes32):(int256)",
      [
        ethereum.Value.fromSignedBigInt(wager),
        ethereum.Value.fromSignedBigInt(odds),
        ethereum.Value.fromFixedBytes(propositionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPotentialPayout(
    propositionId: Bytes,
    wager: BigInt,
    odds: BigInt
  ): BigInt {
    let result = super.call(
      "getPotentialPayout",
      "getPotentialPayout(bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(propositionId),
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(odds)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPotentialPayout(
    propositionId: Bytes,
    wager: BigInt,
    odds: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPotentialPayout",
      "getPotentialPayout(bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(propositionId),
        ethereum.Value.fromUnsignedBigInt(wager),
        ethereum.Value.fromUnsignedBigInt(odds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSettleMessage(index: BigInt, result: boolean): Bytes {
    let result = super.call(
      "getSettleMessage",
      "getSettleMessage(uint256,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromBoolean(result)
      ]
    );

    return result[0].toBytes();
  }

  try_getSettleMessage(
    index: BigInt,
    result: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSettleMessage",
      "getSettleMessage(uint256,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromBoolean(result)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalExposure(): BigInt {
    let result = super.call(
      "getTotalExposure",
      "getTotalExposure():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalExposure(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalExposure",
      "getTotalExposure():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalInPlay(): BigInt {
    let result = super.call("getTotalInPlay", "getTotalInPlay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalInPlay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalInPlay",
      "getTotalInPlay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultAddress(): Address {
    let result = super.call(
      "getVaultAddress",
      "getVaultAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getVaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultAddress",
      "getVaultAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  min(): BigInt {
    let result = super.call("min", "min():(uint256)", []);

    return result[0].toBigInt();
  }

  try_min(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("min", "min():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timeout(): BigInt {
    let result = super.call("timeout", "timeout():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timeout", "timeout():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BackCall extends ethereum.Call {
  get inputs(): BackCall__Inputs {
    return new BackCall__Inputs(this);
  }

  get outputs(): BackCall__Outputs {
    return new BackCall__Outputs(this);
  }
}

export class BackCall__Inputs {
  _call: BackCall;

  constructor(call: BackCall) {
    this._call = call;
  }

  get nonce(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get propositionId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get marketId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get wager(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get odds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get close(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get signature(): BackCallSignatureStruct {
    return changetype<BackCallSignatureStruct>(
      this._call.inputValues[7].value.toTuple()
    );
  }
}

export class BackCall__Outputs {
  _call: BackCall;

  constructor(call: BackCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BackCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get result(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get signature(): SettleCallSignatureStruct {
    return changetype<SettleCallSignatureStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}

export class SettleCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class SettleMarketCall extends ethereum.Call {
  get inputs(): SettleMarketCall__Inputs {
    return new SettleMarketCall__Inputs(this);
  }

  get outputs(): SettleMarketCall__Outputs {
    return new SettleMarketCall__Outputs(this);
  }
}

export class SettleMarketCall__Inputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }

  get propositionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get from(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get marketId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get signature(): SettleMarketCallSignatureStruct {
    return changetype<SettleMarketCallSignatureStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class SettleMarketCall__Outputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }
}

export class SettleMarketCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
